import * as jwt from 'jsonwebtoken';
import * as express from 'express';
import expressUnless from 'express-unless';
export declare type GetVerificationKey = (req: express.Request, token: jwt.Jwt | undefined) => jwt.Secret | Promise<jwt.Secret>;
export declare type IsRevoked = (req: express.Request, token: jwt.Jwt | undefined) => boolean | Promise<boolean>;
export declare type TokenGetter = (req: express.Request) => string | Promise<string> | undefined;
declare type Params = {
    secret: jwt.Secret | GetVerificationKey;
    getToken?: TokenGetter;
    isRevoked?: IsRevoked;
    credentialsRequired?: boolean;
    requestProperty?: string;
} & jwt.VerifyOptions;
export { UnauthorizedError } from './errors/UnauthorizedError';
export declare type ExpressJwtRequest<T = jwt.JwtPayload> = express.Request & {
    auth: T;
};
export declare const expressjwt: (options: Params) => {
    (req: express.Request, res: express.Response, next: express.NextFunction): Promise<void>;
    unless: typeof expressUnless;
};
